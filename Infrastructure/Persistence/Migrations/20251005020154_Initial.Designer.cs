// <auto-generated />
using System;
using ExoplanetFinderBackend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExoplanetFinderBackend.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ExperimentsDbContext))]
    [Migration("20251005020154_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Assumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConclusionId")
                        .HasColumnType("uuid");

                    b.Property<double>("DistanceToStar")
                        .HasColumnType("double precision");

                    b.Property<double>("EarthRadius")
                        .HasColumnType("double precision");

                    b.Property<double>("OrbitDays")
                        .HasColumnType("double precision");

                    b.Property<string>("PlanetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Probability")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ConclusionId");

                    b.ToTable("Assumptions");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Conclusion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Conclusion");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Experiment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConclusionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ConductedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConclusionId");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Observation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Background")
                        .HasColumnType("double precision");

                    b.Property<double>("CentroidCol")
                        .HasColumnType("double precision");

                    b.Property<double>("CentroidRow")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ExperimentId")
                        .HasColumnType("uuid");

                    b.Property<double>("Flux")
                        .HasColumnType("double precision");

                    b.Property<double>("FluxError")
                        .HasColumnType("double precision");

                    b.Property<double>("Quality")
                        .HasColumnType("double precision");

                    b.Property<double>("SapFlux")
                        .HasColumnType("double precision");

                    b.Property<double>("Time")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.ToTable("Observation");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Assumption", b =>
                {
                    b.HasOne("ExoplanetFinderBackend.Domain.Conclusion", null)
                        .WithMany("Assumptions")
                        .HasForeignKey("ConclusionId");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Experiment", b =>
                {
                    b.HasOne("ExoplanetFinderBackend.Domain.Conclusion", "Conclusion")
                        .WithMany()
                        .HasForeignKey("ConclusionId");

                    b.Navigation("Conclusion");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Observation", b =>
                {
                    b.HasOne("ExoplanetFinderBackend.Domain.Experiment", null)
                        .WithMany("Observations")
                        .HasForeignKey("ExperimentId");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Conclusion", b =>
                {
                    b.Navigation("Assumptions");
                });

            modelBuilder.Entity("ExoplanetFinderBackend.Domain.Experiment", b =>
                {
                    b.Navigation("Observations");
                });
#pragma warning restore 612, 618
        }
    }
}
